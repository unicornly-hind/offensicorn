---
import Layout from "../layouts/Layout.astro";
---

<Layout title="L’art de déjouer – Offensicorn">
  <section>
    <h1>L’art de déjouer</h1>

    <p>
      Je n’attaque jamais un système frontalement. Quand je le découvre pour la première fois, ma première question n’est pas “Où est la faille ?”, mais “Comment est-ce que je suis censée l’utiliser ?”
    </p>

    <p>
      Je commence toujours par là. Par l’usage. Par la logique métier. Par les chemins qu’un utilisateur légitime est censé suivre.
      Parce que pour détourner un système efficacement, il faut d’abord comprendre ce qu’il attend de nous. Ce qu’il considère comme “normal”.
      Et c’est justement là, dans ces supposés évidents, que naissent les vraies opportunités.
    </p>

    <p>
      Je dis toujours : « Pour savoir sécuriser, faut bien attaquer. Et pour bien attaquer, faut comprendre le comportement. »
    </p>

    <p>
      Je fais attention à tout ce qu’on ne questionne plus : les flux implicites, les limites qu’on n’essaie même pas de franchir, les éléments que l’on pense maîtriser simplement parce qu’ils ont déjà été testés.
      Ce sont souvent les angles morts les plus intéressants.
    </p>

    <p>
      Et quand je me retrouve bloquée, je ne vois pas un échec. Je vois un signal. Un point de friction. Un endroit à creuser.
      Parce que les systèmes qui résistent sont souvent ceux qui ont le plus à révéler.
    </p>

    <p>
      C’est ce qui rend le pentest si particulier à mes yeux.
      Ce n’est pas une procédure, ni un audit mécanique. C’est un jeu. Un jeu d’exploration, de logique, d’imagination.
    </p>

    <p>
      Et comme tout bon jeu, il devient passionnant quand les règles commencent à se tordre.
    </p>

    <p>
      Alors je joue.<br />
      Je détourne, je combine, je déconstruis.<br />
      Et dans ces moments-là, ce n’est pas juste une faille que je cherche.<br />
      C’est une manière de comprendre, de surprendre — de déjouer.
    </p>
  </section>
</Layout>

